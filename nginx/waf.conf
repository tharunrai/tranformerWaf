# nginx/waf.conf
# Simple Nginx configuration with WAF integration

upstream waf_service {
    server 127.0.0.1:8000;
}

upstream backend_app {
    server 127.0.0.1:8080;  # Your web applications
}

server {
    listen 80;
    server_name localhost;
    
    # WAF analysis endpoint (internal)
    location = /waf-check {
        internal;
        proxy_pass http://waf_service/analyze;
        proxy_method POST;
        proxy_pass_request_body on;
        proxy_set_header Content-Type "application/json";
        
        # Pass request details to WAF
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Args $args;
    }
    
    # Main application routes
    location / {
        # Check with WAF first
        access_by_lua_block {
            local http = require "resty.http"
            local cjson = require "cjson"
            
            -- Prepare request data for WAF
            local request_data = {
                method = ngx.var.request_method,
                path = ngx.var.uri,
                query_params = {},
                headers = {},
                body = ""
            }
            
            -- Add query parameters
            if ngx.var.args then
                for k, v in pairs(ngx.req.get_uri_args()) do
                    request_data.query_params[k] = v
                end
            end
            
            -- Add headers
            for k, v in pairs(ngx.req.get_headers()) do
                request_data.headers[k] = v
            end
            
            -- Add body for POST requests
            if ngx.var.request_method == "POST" then
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                if body then
                    request_data.body = body
                end
            end
            
            -- Send to WAF service
            local httpc = http.new()
            httpc:set_timeout(100)  -- 100ms timeout
            
            local res, err = httpc:request_uri("http://127.0.0.1:8000/analyze", {
                method = "POST",
                body = cjson.encode(request_data),
                headers = {
                    ["Content-Type"] = "application/json",
                }
            })
            
            if res and res.body then
                local result = cjson.decode(res.body)
                
                if result.is_malicious then
                    ngx.log(ngx.ERR, "WAF BLOCKED: ", result.threat_type, 
                           " (confidence: ", result.confidence, ")")
                    ngx.status = 403
                    ngx.say("Request blocked by WAF")
                    ngx.exit(403)
                end
            end
        }
        
        # If WAF allows, forward to backend
        proxy_pass http://backend_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # WAF statistics endpoint
    location /waf-stats {
        proxy_pass http://waf_service/stats;
    }
    
    # WAF health check
    location /waf-health {
        proxy_pass http://waf_service/health;
    }
}

# Alternative simple configuration (without Lua)
# For basic HTTP auth_request method
server {
    listen 8081;
    server_name localhost;
    
    location / {
        auth_request /waf-auth;
        proxy_pass http://backend_app;
    }
    
    location = /waf-auth {
        internal;
        proxy_pass http://waf_service/analyze;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
    }
}